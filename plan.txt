convert 4x4 2048 board to 64 bit integer representation and vice-versa

Try to use an array as much as you can and avoid a hash table. Hash tables lookups take way more time than array lookups.

massive array for going left/right/top/bottom

create functions for going left/right/top/bottom

add random 2 with 0.9 probability and 4 with 0.1

adding random might take a lot of time because I need to identify non-used spaces. I could implement a loop doing randoms until it finds a place with empty spot. But better strategy is to store this 64-bit integer in a hash table with all possible random allocations on that specific board and then selecting one of those at complete random (no 0.9/0.1). But this strategy can also be inefficient because the total number of boards are very very high. I could make it efficient by converting board to a new board where every "used" entry is exactly 2. Or I can also create a new integer for every board with 2 at used-places and 0 at non-used places. And then create an array with such representations connected with a lot of ints where random 2/4 is added to the given integer.

For 64 bit integer representation of the board, 0 : empty, 1 : 2^1 = 2, 2 : 2^2 = 4, ..., 15 : 2^15 = 32768. We won't allow going over 32768 - when 32768 happens, we end the game and declare victory.

optimize multiplication and exponentiation and log_base_2

for (i,j) in board, add integer representation by (2^(60 - 16*i - 4*j) * log_2(board[i][j]))

is num.leading_zeros() fast?

is try_into().unwrap() slowing down code?

figure out the mess of all these types - u32, u64, i32....

is making a variable costly? compared to using it without a name?

"as" vs "into" vs "try_into().unwrap()"


Question : what to do if we have 2 "32768" which will make a "65536"?
Answer : the array doesn't have any "15" in the left side, i.e., array doesn't have any "32768" on the left side, only on the right side. When we reach "32768" we call it victory. If we allow multiple "32768" on the left side, what do we do on the right side for that case? We can put all 0s, considering that we will always have some numbers in the game (we start by 2 numbers by default). So we can do all 0s on the right side when we reach "65536".

Question : when we input a u64, should we take it by value or by reference? Which is faster?
Answer: They both are almost the same speed, so choose what's convenient.



---------------------
|    |    |    |    |
| 60 | 56 | 52 | 48 |
---------------------
|    |    |    |    |
| 44 | 40 | 36 | 32 |
---------------------
|    |    |    |    |
| 28 | 24 | 20 | 16 |
---------------------
|    |    |    |    |
| 12 | 8  |  4 |  0 |
---------------------

^ 60 means from 63-60; ...

keyword "as" converted by removing data without any error.

TODO: optimize fast_up and fast_down a lot more. There is a sparse-but-very-large-array problem.

Having a complete 32 bit array (i.e., calc 2 rows at the same time) might be another optimization.

idea for up/down: 
63-60 (col1, ele1); 59-56 (col2, ele1); 31-28 (col1, ele3); 27-24 (col2, ele3); 47-44 (col1, ele2); 43-40 (col2, ele2); 15-12 (col1, ele4); 11-8 (col2, ele4) - 32 bits
extracting col1 (16 bits): 4 bits at a time; might need to zero out everything else.

complete 32-bit array idea is brilliant. All 4 operations will be possible in 4 bit shifts. Should be very very fast.

Question: does calling a function take time? I am talking about v.v.small amount of time. Also, check "inline" or something where the compiler puts called func code in caller's code.

Problem: complete u32 bit array is impossible because it will need 64 GBs of RAM - not possible for me. But a cleverly designed complete 24-bit array might work with heap storage. Problem there is making "u24" work. For "u24" I can use u32 with first 8 bits as 0. This is because I don't want to use a rare type "u24" which may not be optimized as well as "u32" will be - considering computers can handle 32 bits a lot more naturally than 24 bits.

I will use it as : 63-60; 31-28; 8 0 bits; 47-44; 15-12 - this takes 24 bits. Method is : extract 63-60..47-44 with all other 0s; similarly, extract 31-28..15-12 with all other 0s. Bit shift them properly and add.

I will worry about these optimizations later on. Right now, I am sticking to 16 bits for all.